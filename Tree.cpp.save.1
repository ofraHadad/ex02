#include <iostream>
using namespace std;

#include "Tree.h"
#include "Node.h"




Tree :: Tree() 
{
	head=NULL;
}

Node* Tree::getRoot()
{
	return this -> head;
}

void  Tree::insert(int x)
{
	if(getRoot()==NULL)
	{
		head= new Node(x);
		count=1;
	}
	else if(getRoot()->getNum()>x)
	{
		insert(x,getRoot()->getLeft(),getRoot());
	}
	else
	{
 		insert(x,getRoot()->getRight(),getRoot());
	}
}

void Tree :: insert(int x ,Node * n,Node* p)
{
	if (n==NULL)
	{
		n= new Node(x);
		n->setParent(p);
		count++;

	}
	else if(n->getNum()>x)
	{
		insert(x,n->getLeft(),n);
	}
	else
	{
		insert(x,n->getRight(),n);
	}
}

void Tree :: print()	
{
	printInorder(getRoot());
	cout<<"\n"<< count;
}

void Tree :: printInorder( Node* node) 
{ 
    if (node == NULL) 
        return; 
  
    /* first recur on left child */
    printInorder(node->getLeft()); 
  
    /* then print the data of node */
    cout << node->getNum() << "."; 
  
    /* now recur on right child */
    printInorder(node-> getRight()); 
}

int Tree::size()
{
	return count;
}

int Tree:: root()
{//add hariga null
	return getRoot()->getNum();
}

int Tree :: parent(int x)
{
	Node * n=search(x,getRoot());
	if(n==NULL || n->getParent()==NULL)
	{
	//hrigaa
	}
	
	return n->getParent()->getNum();
	
}

int Tree:: contains(int x)// 1 false  0 true
{
	Node * n= search(x,getRoot());
	if(n==NULL)
	{
		return 1;
	}
	return 0;
}

int Tree :: left(int x)
{
	cout<<"11";
	Node * n= search(x,getRoot());
	cout << "22";
	if (n==NULL)
	{
//harigaaa
	}
	if(n->getLeft()==NULL)
	{
//harigaa
	}
	return n->getLeft()->getNum();
}

int Tree :: right(int x)
{
        Node * n= search(x,getRoot());
        if (n==NULL)
	{
//harigaaa
	}
        if(n->getRight()==NULL)
	{
//harigaa
	}
        return n->getRight()->getNum();
}

Node * Tree::search(int x, Node* n)
{
	if(n==NULL)
	{
		return n;
	}
	if (n->getNum()==x)
	{
		return n;
	}
	if(n->getNum()>x)
	{
		return search(x,n->getLeft());
	}
 	else
	{
		return search(x,n->getRight());
	}
}
